using System.Collections.Generic;

namespace SwordsOfExileGame;

public class Pattern
{
	private readonly byte[,] p;

	public int this[int x, int y] => (int)p[x, y];

	public Pattern(params int[] q)
	{
		p = new byte[9, 9];
		var a = 0;
		for (var y = 0; y < 9; y++)
		for (var x = 0; x < 9; x++)
			p[x, y] = (byte)q[a++];
	}

	public IEnumerable<Location> EachPatternSpot(Location centre_pos)
	{
		for (var y = 0; y < 9; y++)
		for (var x = 0; x < 9; x++)
			if (p[x, y] != 0) yield return centre_pos.Mod(x - 4, y - 4);
	}

	public static Pattern FromIndex(int i)
	{
		switch (i)
		{
			case 0: return Single;
			case 1: return Plus;
			case 2: return SmallSquare;
			case 3: return Square;
			case 4: return Radius2;
			case 5: return Radius3;
			default:
				return Field[i - 6];
		}
	}

	public static Pattern Single = new(0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern Plus = new(0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern SmallSquare = new(0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern Square = new(0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern Radius2 = new(
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 1, 1, 1, 1, 1, 0, 0,
		0, 0, 1, 1, 1, 1, 1, 0, 0,
		0, 0, 1, 1, 1, 1, 1, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern Radius3 = new(0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 1, 1, 1, 1, 1, 0, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 1, 1, 1, 1, 1, 1, 1, 0,
		0, 0, 1, 1, 1, 1, 1, 0, 0,
		0, 0, 0, 1, 1, 1, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0);
	public static Pattern[] Field = {new(0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,1,1,0,0,0),
		new(0,0,0,0,0,0,0,0,1,
			0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0),
		new(0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0),
		new(1,0,0,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,0,0,1,1),
		new(0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,1,1,0,0,0,0),
		new(0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			1,1,0,0,0,0,0,0,0,
			1,0,0,0,0,0,0,0,0),
		new(0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			1,1,1,1,1,1,1,1,1,
			1,1,1,1,1,1,1,1,1,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0,
			0,0,0,0,0,0,0,0,0),
		new(1,1,0,0,0,0,0,0,0,
			0,1,1,0,0,0,0,0,0,
			0,0,1,1,0,0,0,0,0,
			0,0,0,1,1,0,0,0,0,
			0,0,0,0,1,1,0,0,0,
			0,0,0,0,0,1,1,0,0,
			0,0,0,0,0,0,1,1,0,
			0,0,0,0,0,0,0,1,1,
			0,0,0,0,0,0,0,0,1)};
}